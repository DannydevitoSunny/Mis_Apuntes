*Adicional: React permite importar codigo CSS, no rallarse por eso!!!
Todos los componentes teben tener su metodo render{ return() };
Todos los componentes heredan de React.Component
Cada componente que creemos debe tener un EXPORT, para poder ser importado
Cada componente se invoca como una etiketa HTML <NombreComponente/>
VARIABLES: si queremos declarar variables debemos hacerlo antes de render{}, dentro o fuera, pero nunca dentro de return, ahi solo las llamamos

IMPORTANTE!!!
--Cada componente tiene una propiedad llamada ===> this.prop
this porque es suya propia, y los prop son los paramentros que recibe,
ejemplo==>> <NombreComponente param1="Nuevo Titulo"/>
para recojerlo seria ==> {this.prop.param1}

CONSTRUCTOR
Cuando creamos un componente , este tiene un costructor vacio por defecto
si queremos crear un costructor debemos invocar el constructor padre super()


--->Otra forma de extraer states
	this.state = {contador:0}
	 var { contador} = this.state
@@@@@@@@@@@@@@@@@@@@@@@@ H O O K S  €€€€€€€€€€€€€€€€€€€€€€€€€€


SI NO QUEREMOS USAR COMPONENTES DE TIPO CLASE
	Ejemplo: class Car extends React.Component
	
Entonces podemos usar funciones y HOOKS
LAS FUNCIONES TAMBIEN SE IMPORTAN, EXPORTAN Y RECIBEN PROPS
PERO NO POSEEN CICLOS DE VIDA, LOS HOOKS SI
------------------------------------------------------
import React, { useState } from 'react'
export default function Car(){
	---EL parametro inicializa y el segundo es el callback que usaremos
	const [count, setCount] = useState(0)
	var [persona, creador] = useState({nombre:"", apellido:"", edad:""});
	return (
    		<div>
      			<p>Has hecho click {count} veces</p>
      			
     		 	<button onClick={() => setCount(count + 1)}>
      			  Haz click!
      			</button>
    		</div>
  	)
}
@@@@@@@@@@@@@@@@@@@@@@ C O N T E X @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

import React, { Component } from 'react';

export const MyContext = React.createContext();

export class MyProvider extends Component {
    constructor(props){
        super(props)
        this.state = {
            ApiKey:"XjauhfruKLK454-22",
            Lenguage: "Eng",
            LocalTime: "Spain",
            UserName: "Ruslan"
        }

        this.setKeyFun = (key)=>{
            if (key != "") {
                this.setState({
                    ApiKey:key,
                })
                }
            else{
                this.setState({
                    ApiKey:"You need set a Key",
                })
            }
        }
    }
    
  render() {
    return (
      <MyContext.Provider value={{
          state: this.state, 
          setKey: this.setKeyFun,
        }}>
        {this.props.children}//-->This is consultory, you can't change this name
      </MyContext.Provider>
    )
  }
}
<MyContext.Consumer>
	{(value)=>(
		AQUI ES DONDE VA EL DIV QUE RETORNA NUESTRO COMPONENTE
		<div>
			
			<h1>{value.state.UserName}</h1>
			<p onClick={{()=>value.setKey(nuevoValor)}}> Actualizar api key </p>
		</div
		
	)}
</MyContext.Consumer>
€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€
ESTADO / STATES
Solo por ser REACT, en vez de llamar propiedades del objeto
tenemos ahora "state", que usa JSON para definirlos,
Si un state(propiedad) cambia, la pagina se renderiza,
Para cambiar un estado se usa el metodo this.setState,
solo dentro del constructor podemos usar this.state
fuera de constructor SIEMPRE setState() : 

class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };

    this.setState({
	brand:"Audi" 
    });

    this.setState((param1,props)=>({ //--------->CON PARAMETROS
	param1:"props.parametro" 
    }));


  }
  render() {
    return (
      <div>
        <h1>My Car</h1>
        <h2>{this.state.brand}</h2>
      </div>
    );
  }
}




€€€€€€€€€€€€€€€€€€€€€--- R O U T E S -- €€€€€€€€€€€€€€€€€€€€€€€€€€€€€
import React from "react";
import {Route, Switch, Link, BrowserRouter as Router,} from "react-router-dom";-->OBLIGATORIO
import Home from './home.js' --->>RUTAS DE MIS COMPONENTES
import Info from './dataRequest.js'


const RouteSS =()=>{
    return(
        <div>
         <Router>
                <nav className="nav bg-dark">
                    <Link to="/"><a className="nav-link text-white disabled">Home</a></Link>
                    <Link to="requestData"><a className="nav-link text-white  disabled">Info</a></Link>
                </nav>
            <Switch>
                <Route path="/" exact component={Home}></Route>
                <Route path="/requestData" exact component={Info}></Route>
            </Switch>
         </Router>
        </div>
    )
}


€€€€€€€€€€€€€€@@@@@@@@@@--- S E T   S T A T E   AND   ARGS  F U N C T I O N S --@@@@@€€€€€€€€€E
	this.setState({usersData: this.users.map((item)=>{
                        return (
                            <tr  key={item.id} onClick={() => this.selectUser(item.name)} >
                                <th scope="row" className="th-User UserName">Name: {item.name}  </th>
                                <th scope="row" className="th-User">id: {item.id}  </th>
                                <th scope="row" className="th-User">Workspace id: {item.workspace}  </th>
                            </tr>
                        )
                    })})


ARGS ---->>>  onClick={() => this.selectUser(item.name)}

€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€

export default RouteSS;

---Router-->engloba los links
---Switch -->Renderiza las rutas pasando de una a otra por URL
---Link --> El enlace en si

€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€


@@@@@@@@@@@@@@@@@@@@@@@@ FROM  C H I L D   TO   P A R E N T @@@@@@@@@@@@@@@@@@@@@@@@

	--El react es una mierda y nada intuitivo
	  esto de aqui abajo no tiene ningun sentido, pero funcionaa

Child--->  onClick={this.props.parametroX(this.state.NuestraVariable)}
Parent --> <Micompnent  parametroX = {this.funcionHandlePadre}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@@@@@@@@@@@@@@@@@@@@@ G L O B A L E S   C O N T E X T  @@@@@@@@@@@@@@@@
theme-context.js
----------------


export const themes = {
  light: {
    foreground: '#000000',
    background: '#eeeeee',
  },
  dark: {
    foreground: '#ffffff',
    background: '#222222',
  },
};

export const ThemeContext = React.createContext(  themes.dark // valor por defecto);


------------------------------------Otro componente ----------------


import {ThemeContext} from './theme-context';

class ThemedButton extends React.Component {
  render() {
    let props = this.props;
    let theme = this.context;    return (
      <button
        {...props}
        style={{backgroundColor: theme.background}}
      />
    );
  }
}
ThemedButton.contextType = ThemeContext;
export default ThemedButton;



@@@@@@@@@@@@@@@@@@@@@ VERY IMPORTANT   R E F S   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<div  id="myId" ref = {nameRef = {this.variable  = nameRef}}></div>
this.func =()=>{
	let id  = this.variable.id
	let value = this.variable.innerHTML
}
€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€

Toda la aplicacion es disparada desde src/index.js que a su vez usa src/App.js
En vez de class, usamos className=""
Dos carpetas impotantes==> public y src
Nosotros escribiremos codigo dentro de src
Dentro de public tenemos nuesta pagina.html donde se muestra la aplicacion
El codigo de JS va dentro de{} ==> {alert("hola")};
El JSX solo puede devolver un elemento!!! es decir, todo dentro de un div!!

