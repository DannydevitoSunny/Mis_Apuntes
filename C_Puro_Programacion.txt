 Para mezclar dos archivos de codigo en C necesitamo crear un proyecto(puede que sin proyecto)
el archivo main siempre es .c pero los demas tienen que se punto .h
ademas hay que recordar que las libreria estandart de C se importan con #include<libreria>
mientras que las propias se importan con #include"libreria"

**puntero a otro puntero
-> la flecha es para dato tipo struct puntero ejemp: struct * s ; s->valor
para declarar una varibale de tipo global entre dos ficheros se usa la palabra "extern int variable" 
si queremos que una variable local actue como global debemos declararla como static (tambien en php)

friend --> nos permite declarar la funcion fuera 
explicit--> nos permite obligar la llamada del constructor de forma correcta
static --> fuera del clase hace a la funcion a varibale invisible para el resto de archivos
	en cambio dentro de una funcion hace que la variable mantenga al memoria despues del scope
operator <signo> --> nos permite sobreescribir signos ya existentes
const --> aparte de crear constantes nos permite hacer una funcion inmutable (LAS FUNCIONES CONST SOLO VALEN SI SON DE CLASE)
mutable --> con esta definicion podemos alterar variables dentro de funcione const
inline --> sirve para las funciones cortas y que se llaman pocas veces,	
	evita que la memoria tenga que buscar dicha funcion, por lo que transporta
	el codigo a la line en la que se envoca, como su fuera una instruccion mas


@@@@@@@@@@@@@@@@@@ C O M P I L A C I O N @@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
	
	IMPORTANTE: el nombre de nuestro source tiene que aparecer ANTES que las librerias (-l)
	si compilamos librerias dinamicas lo mas probable que tengamos que añadirlas a una ruta del sistema
	- o utilizar -Wl rpath, EJEMPLO: g++ -L/my/dir/path/ -Wl,-rpath=/my/dir/path/ -l:foo.so -l:bar.so
	-rpath es runtime path

	Esto es la compilacion de una libreria estatica, con dos rutas relativas y una absoluta (relativa L.)
g++ miArchivo.cpp -std=c++17 -I./librerias/headers -L./librerias/statica -L/usr/local/sys -lprimera -lsegunda -lsystem -o nombreSalida.exe

g++ miArchivo.cpp -c -std=c++20 -I/usr/include -o salida.o --> esto compila el codigo con los headers, tendremos que añadir lib aparte
g++ salid.o -L/usr/lib -lmysql -o test.exe

el parametro -Wall es activar todos los warnigs
tambien podemos usar -v para mas informacion sobre la compilacion
-----------DEBUG
g++ -g miArchivo -o salida
gdb ./salida --> lanza el debugger


################ rvalues and lvalues ################
lvalues son todos aquellos que tienen una direccion y podemos rerfernciarlos
rvalues hay dos tipos:
	los que son puros (pvalue) --> 42, "String" ....
	los que son temp  (xalue)--> datos retorno, parametros por valor .... 

para pasar los objetos como rvalue dos formas:
	1. Persona p1( (Persona&&)p2 ) ---> hacemos un casting  a rvalue (o xvalue)
	2. Persona p1  (std::move(p2)) ---> hacmos el casting a traves de move( static casting) 

############# using vs using namespace #####################
si usamos solo using e.g.
using System::Server::Request; --> esto es solo usamos el objeto/subname Request de todo el namespace
using namespace System::Server; ---> usamos todo el namespace con todas las clases que le pertenezcan
otro ejemplo es : using namespace std;

############## FUNCIONES LAMBDA Y CALLBACKS ################


auto x = [a] { return (a+1); };  simple funcion lambda
x(4); //resultado 5
---------------------------------------------------------------------------

template<typename myLambda> ------> CREANDO PARAMENTRO CALLBACK
void mi_callback(myLambda fun)
{
   	cout << fun(10) << endl;
}

int g(int x)
{
    return x * x;
}

mi_callback(g);      // pasamos la funcion g como parametro a mi otra funcion
----------------------------------------------------------------------------
############ constructor por defecto

int a{}-->> es lo mismo que int a = 0;


########## 	c++ 17
<optional> comprueba si la varible lleva datos y podemos comprobar que existen
<variant>  nos permite definir varios tipos para una solo varibale (dependiendo de inicializacion cambia)
std::any ---> varible de cualquier tipo (variant es mas rapido)

################ C DESDE C++
#include<iostream>
extern "C"{
	#include <stdio.h>

	void f(void)
	{ 
	    printf("\n This is a C code\n");
	}
};

int main(){
    
    f();
	
    return 0;
}

############ MEMORY LEAK
SI EL PROGRAMA SE CIERRA EN LA MAYORIA DE SISTEMAS LA MEMORIA SE LIMPIARA!!
es decir, algunos sitemas embebidos no borran la memoria
pero los pricipales como linux, mac o windows si que lo haran


############### PARAMETERS PACK
solo funciona con plantillas
aqui estamos pasando indefinido numero de int como parametros

template<typename ...Ints>
void printa(Ints... ints) 
{
   int args[] { ints... }; 
   cout<<args[0]<<"\n";
}
int main()
{
    printa(1,2,4,5);

    return 0;
}

########### INCLUDES EN C++
los headers deberian solo llevar el codigo esencial
es decir las definiciones de clase o solo librerias esenciales,
si por ejemplo iostream no es usado en la definicon (en el header)
entonces solo lo importaremos en el cpp si vamos hacer uso de el

//IMPORTANTE: DEBEMOS EVITAR HACER INCLUDES DENTRO DEL HEADER A MENOS QUE SE IMPLEMENTEN
		EN LA DEFINICON DE LA ESTRUCTURA QUE ESTAMOS CREANDO
		TODOS LOS INCLUDES DEBEN IR EN EL .cpp

dentro de los headers, para que no se repitan hacemos lo siguiente
#ifndef NOMBRE_MODULO_H
#define NOMBRE_MODULO_H
//..........codigo del header
#endif



############## LOS BIT FIELDS
SOLO FUNCIONA DENTRO DE STRUCTS CLASS Y UNION
struct halfbyte_t {
    unsigned int half1: 4;
    unsigned int half2: 4;
} halfbyte;  //especificamos cuantos bits va a tomar una variable



############# CASTING EN C++
los diferentes metodos de casting en c++ nos permiten hacer un control
de errores a la hora de la convercion de un tipo a otro ya que nos devuelven
un resultado tipo null u otra cosa para saber si todo ha ido bien




################# POINTERS FUNCTIONS
SYTAXIS: tipo retorno (*nombre funcion)(tipos de datos de los paramentros)
	
		int (*funcion_puntero)(int,std::string); Esto seria el delegado o LA PLANTILLA
		funcion_puntero= &funcion_de_verdad; 
		(*funcion_puntero= )(); ----> llamada


################# FUNCTIONS REFERENCES
SYTAXIS: tipo retorno (&nombre funcion)(tipos de datos de los paramentros)
	void (& f_ref)(int, char) = funcion1
	f_ref() ---> llamada


############ HERENCIAAAA
Si hay herencia lo mejor que podemos hacer es dentro de la clase BASE
declarar el DESTRUCTOR como virtual para poder sobreescribirse desde los hijos y 
asi poder ser invocado sin fugas de memoria

############# GLOBALES #######
Si tenemos una variable local llamada igual que una global
podemos resolvel el conflicto para llamar a la global con
::mi_globalVar, esto empieza a mirar desde el scope global

############### structuras ANONIMAS
podemos crear estructuras unionees o clases de forma anonima,
es decir no nos hacen falta los nombre ejemplo:
de esta forma agrupamos los miembros  en estructruras pero non tenemos que inicializarlos
class Persona{
    public:
        union{
    		int x;
    		double y;	
    	};
    	struct{
    		int a;
    		double b;	
    	};

};

Persona p;
    p.a =5;
    p.x =5;

############# PUNTEROS MULTIDIMENSIONALES #############

	declaracion de punteros para leer en codigo
	si vemos un * eso quiere decir que tenemos un puntero que apunta a un valor
	si vemos dos ** o mas eso quiere decir que el puntero apunta a una direccion si o si

	int ***puntero = new int** arrayPunteros[5]; NO CONFUNDIR, esto no nos devuelve un puntero ni un array de punteros,
						     esto nos devuelve la direccion de donde empieza el array (ejmp: &arrayPunteros[0])
						     

NECESITAMOS DECLARAR LOS PUNTEROS  CON UN TYPE PARA QUE SEPAN CUANTOS ESPACIOS TIENEN QUE SALTAR
ejemplo: un puntero int *pt es de tipo entero, si hacemos pt+1 saltara 4 bytes (lo que mide un int)
--->IMPORTANTISIMO => la direccion de un array es LA DIRECCION DEL PRIMER ELEMENTO!!!!!
		No confundir nunca notacion de arrays con punteros
		recordar que : La direccion del array a === a[0]
		@@@@@ ESTAS DOS COSAS SON LO MISMO @@@@
	punteros---> *(*(*(a1+i)+j)+k) --> el * solicita el valor (a+1) es la direccion del saltando a la siguente
	arrays  ---> a1[i][j][k]

EJEMPLO PUNTERO DOBLE:
	int **ptp2;
    	ptp2 = &ptp;
    	cout<<"Direccion de **ptp2: ["<<ptp2<<"] y Valor es = "<<*ptp2<<" Evaluar direccion del valor: "<<**ptp2;

SINTAXIS para punteros multidimensionales:
	w[0] == *w la primera es NOTACION ARRAY
	int ***p ;
	<p>  es la direccion basura, hasta que le asignemos a donde tiene que apuntar
	<*p> es la direccion de donde apunta
	<**p> es el valor del puntero al que apunta ( un asterisco representa la direccion al que  apunta)
	<***p> es la evaluacion de la direccion del ultimo puntero al que apuntamos (el mismo numero de * siempre es la evaluacion del valor)



################ PUNTERO VOID*
int a = 0;
int& function(){
    a =10;
    cout<<"direccion de a : "<<&a<<"\n";
    return a;
}

int main()
{
    void *p; ---> LOS PUNTEROS VOID PUEDEN SER CUALQUIER TIPO DE PUNTERO
    p =&function();
    
    cout<<"direccion en p : "<<p<<" y valor que tiene es :"<<*(int*)p<<"\n";

    return 0;
}


######## CONSTRUCTRORES EN C++ #########
hay tres tipos
	constructor  1: Entity(int a, std::string c);
	destructor   2: ~Entity();
	interfaz     3: hacerfuncion()=0;
	evitar copia 4: Entity(const Entity& otraEntidad)= delete

############# TEMPLATE ###########
sin typedef --> int (Persona::*function)(int) = &Persona::function;
con:
	typedef int (Persona::*function)(int);
	function f = &Persona::function;



typedef int numero;
using numero=int;


typedef typename _MyBase::value_type  mi_nuevoNombre;  cambiamos tipo de nombre para el tipo de variable(para nombres largos)
mi_nuevoNombre v;

ejemplo real:
        typedef typename std::remove_cv<typename std::remove_pointer<T>::type>::type  ObjType;
        return static_cast<T>(qt_qFindChild_helper(this, aName, ObjType::staticMetaObject, options));
------------------------------------------------
typedef NTSTATUS(NTAPI *pdef_NtTerminateProcess)(HANDLE ProcessHandle, NTSTATUS ExitStatus); FUNCION CON 2 PARAM QUE DEVUELVE NTSTATUS
pdef_NtTerminateProcess mifuncion = funcion() //DELEGADO EN C++
------------------------------------

template <typename/class T> void functionName(T value){} //typename o class es lo mismo pero el primero se ve mas correcto
example: functionName<std::string>("hola");
	 functionName("hola");

<typename/class T, int N, std::string S> void functionName(T value, N value2, S value3 ){}

template <class T>
void foo() {
   typename T::iterator * iter; --> sin el typename se interpretaria como una multiplicacion y la creacion de un puntero
   ...
}



#################### DESTRUYENDO MEMORIA EJEMPLO BUENO POR MI
class N {
    public:
        N() {
            std::cout << "Creating object of type N\n";
        }
        ~N() {
            std::cout << "Destroying object of type N\n";
        }
};

class M {
    public:
        M() {
            cout<<"Created N from M\n";
        }
        ~M() {
            delete *n2; //destruyo n1 por por tanto destruyo el valor de N que tenia almacenado en el heap
            cout<<"N deleted from M\n";
        }
        N* n;
        N** n2;
        
    };

int main()
{
    M m;
    m.n=new N();
    m.n2 = &m.n;
    cout<<"\n"<<m.n<<" ---  "<<*m.n2<<"\n";






######################### diferencia entre por referencia y por valor con punteros
#include <iostream>

using namespace std;

void passParam(int & x){
    
    x = x+2;
}

void passPt(int *pt){
    
    cout<<"direccion del puntero parametro:"<<&pt<<"\n";
}


void passPtdir(int *&pt){
    
    cout<<"direccion del puntero parametro por referencia:"<<&pt<<"\n";
}
int main()
{
    int a  = 25;
    int & refa = a;
    passParam(a);
    cout<<a<<"\n\n";
    
    int b = 30;
    int * ptb = &b;
    passPt(ptb);
    cout<<"direccion del puntero original:"<<&ptb<<"\n\n";
    

    passPtdir(ptb);
    cout<<"direccion del puntero original:"<<&ptb<<"\n";
    
    return 0;
}